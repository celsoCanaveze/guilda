# --- Database (Postgres) ---
spring.datasource.url=jdbc:postgresql://localhost:5432/guilda
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Flyway
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

# Thymeleaf
spring.thymeleaf.cache=false

# --- Security / OAuth2 (genérico) ---
# Registration: você cria uma "registration" com id 'myclient'.
# Preencha client-id e client-secret com os valores do provedor escolhido.
spring.security.oauth2.client.registration.myclient.client-id=SEU_CLIENT_ID
spring.security.oauth2.client.registration.myclient.client-secret=SEU_CLIENT_SECRET
spring.security.oauth2.client.registration.myclient.client-name=MeuOAuth
spring.security.oauth2.client.registration.myclient.scope=openid,email,profile
spring.security.oauth2.client.registration.myclient.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.myclient.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Forneça os endpoints do provedor (authorization, token, user-info) se não for OIDC padrão:
spring.security.oauth2.client.provider.myclient.authorization-uri=https://provider.example.com/oauth2/authorize
spring.security.oauth2.client.provider.myclient.token-uri=https://provider.example.com/oauth2/token
spring.security.oauth2.client.provider.myclient.user-info-uri=https://provider.example.com/userinfo
spring.security.oauth2.client.provider.myclient.user-name-attribute=id
